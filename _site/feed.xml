<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>春意闹</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 05 May 2017 10:22:41 +0800</pubDate>
    <lastBuildDate>Fri, 05 May 2017 10:22:41 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Android萤火虫飞舞粒子效果</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;GitHub地址&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;萤火虫飞舞粒子效果&quot;&gt;萤火虫飞舞粒子效果&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;本项目中我提供了两种方案，最终呈现的效果如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://JadynAi.github.io/img/20170428-blog-particle.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;先奉上GitHub地址&lt;/strong&gt;&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;戳这里&lt;/a&gt;，有兴趣的同鞋star一下咯&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;

&lt;p&gt;Android的粒子效果、粒子动画，已经有很多开源的轮子了。作为一个坚定的轮子主义者，我google了大半天，却没有找到这种类似于萤火虫飞舞的效果。只好自己来实现这种效果。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;相比较普通的View，SurfaceView更加适合这种不断变化的画面，所以选择SurfaceView来实现。现在把思路再重新梳理一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大小不同的粒子在区域内随机分布&lt;/li&gt;
  &lt;li&gt;粒子做无规则运动，然后消失&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;粒子区域内随机分布&quot;&gt;粒子区域内随机分布&lt;/h5&gt;

&lt;p&gt;这个简单，我们在callBack的方法内直接循环生成一个粒子的数组即可。方位的话使用Random即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (mCircles.size() == 0) {
    for (int i = 0; i &amp;lt; MAX_NUM; i++) {
        FloatParticleLine f = new FloatParticleLine(getF() * mMeasuredWidth, getF() * mMeasuredHeight, mMeasuredWidth, mMeasuredHeight);
        f.setRadius(mRandom.nextInt(2) + 1.2f);
        mCircles.add(f);
    }
}
private float getF() {
        float v = mRandom.nextFloat();
        if (v &amp;lt; 0.2f) {
            return v + 0.2f;
        } else if (v &amp;gt;= 0.85f) {
            return v - 0.2f;
        } else {
            return v;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;getF（）方法是限制在区域内取值，mMeasuredWidth、mMeasuredHeight为SurfaceView的宽和高。&lt;/p&gt;

  &lt;p&gt;这里的宽和高在粒子对象FloatParticleLine，内会用到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后我们在创建一个线程，在run（）方法内做无线循环的绘制即可，为了避免无意义的绘制，可以使用Thread.sleep方法来控制帧数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (isRun) {
    try {
        mCanvas = mHolder.lockCanvas(null);
        if (mCanvas != null) {
            synchronized (mHolder) {
                // 清屏
                mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);

                for (FloatParticleLine circle : mCircles) {
                    circle.drawItem(mCanvas);
                }
                // 控制帧数
                Thread.sleep(25);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (mCanvas != null) {
            mHolder.unlockCanvasAndPost(mCanvas);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;isRun的变量我们会在SurfaceView内callBack的surfaceDestroyed方法中置为false&lt;/p&gt;

&lt;h5 id=&quot;粒子做无规则运动&quot;&gt;粒子做无规则运动&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;方案一&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实看到这种粒子效果，首先应该想到的就是Canvas了。&lt;/p&gt;

&lt;p&gt;在SurfaceView里就是通过不断地循环调用FloatParticleLine类的drawItem（）方法来实现粒子的运动。我第一种方案的实现，就是每一个粒子在被创建出来的时候，就随机选择一个方向开始运动，滑过一定的轨迹之后让其消失就好了。&lt;/p&gt;

&lt;p&gt;至于怎么选择随机方向，我这里的做法是，分别随机生成一个x和y轴上的递增或者递减的数值，然后每次在前一次绘制的基础上，x和y分别递增递减，直到运动到屏幕边缘或者是规定的运动距离满足了再消失即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//随机生成参数
private void setRandomParm() {
    // 2017/5/2-上午10:47 x和y的方向
    mIsAddX = mRandom.nextBoolean();
    mIsAddY = mRandom.nextBoolean();

    // 2017/5/2-上午10:47 x和y的取值
    mDisX = mRandom.nextInt(2) + 0.2f;
    mDisY = mRandom.nextInt(2) + 0.3f;

    // 2017/5/2-上午10:47 内部区域的运动最远距离
    mDistance = mRandom.nextInt((int) (0.25f * mWidth)) + (0.125f * mWidth);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;绘制图形：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void drawItem(Canvas canvas) {
    if (mX == mStartX) {
        mPaint.setAlpha(ALPHA_MAX);
    }
    //绘制
    canvas.drawCircle(mX += getPNValue(mIsAddX, mDisX), mY += getPNValue(mIsAddY, mDisY), mRadius, mPaint);
    //内部区域运动到一定距离消失
    if (judgeInner()) {
        float gapX = Math.abs(mX - mStartX);
        float ratio = 1 - (gapX / mDistance);
        mPaint.setAlpha((int) (255 * ratio));
        mRadius = mStartRadius * ratio;
        if (gapX &amp;gt;= mDistance || mY - mStartY &amp;gt;= mDistance) {
            resetDisXY();
            return;
        }
        return;
    }
    //外部区域运动到屏幕边缘消失
    if (judgeOutline()) {
        resetDisXY();
    }
}

private void resetDisXY() {
        setRandomParm();

        mPaint.setAlpha(0);
        mX = mStartX;
        mY = mStartY;
        mRadius = mStartRadius;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;judgeInner()和judgeOutline()是判断区域的方法，内部区域的点和外部区域的店消失时机不同&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在透明度为0也就是粒子消失时，让粒子回到原点，再重新选择一个方向，进行下一步运动轨迹。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案二&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方案二粒子做的运动是贝塞尔曲线，函数实在网上找到的一个函数。每当粒子做完一次曲线运动后，再随机生成一段新的贝塞尔曲线即可。&lt;/p&gt;

&lt;p&gt;思路和方案一的思路都是一样的，无非就是运动的轨迹不同而已。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;做完之后回头再看，发现这个项目的原理其实并不难，可以说是简单了。但刚开始起步的时候真的还是比较懵的，原因就是没有思路。&lt;/p&gt;

&lt;p&gt;所以做任何效果，思路最重要。&lt;/p&gt;

</description>
        <pubDate>Wed, 03 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/03/Android%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E4%B9%8B-%E8%90%A4%E7%81%AB%E8%99%AB%E9%A3%9E%E8%88%9E%E6%95%88%E6%9E%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/03/Android%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E4%B9%8B-%E8%90%A4%E7%81%AB%E8%99%AB%E9%A3%9E%E8%88%9E%E6%95%88%E6%9E%9C/</guid>
        
        <category>粒子效果</category>
        
        <category>Android动画</category>
        
        <category>技术讨论</category>
        
        
      </item>
    
      <item>
        <title>JadynAi的第一篇博客</title>
        <description>
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF/</guid>
        
        <category>技术讨论</category>
        
        
      </item>
    
  </channel>
</rss>
