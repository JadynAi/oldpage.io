<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>夏蝉饮冰</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 10 Jan 2018 10:56:37 +0800</pubDate>
    <lastBuildDate>Wed, 10 Jan 2018 10:56:37 +0800</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>手把手教你撸一个全局Toast（对话框、浮动通知栏）</title>
        <description>&lt;p&gt;&lt;em&gt;本文属于Android技术论述文章，阅读完大致需要四分钟&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;没时间的小伙伴可以直接跳过文章，&lt;a href=&quot;https://github.com/JadynAi/LoadingLovely&quot;&gt;点击项目地址&lt;/a&gt;，如果喜欢的话，顺手给个star那是极好的【娇羞……】&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/10/%E5%85%A8%E5%B1%80Toast/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/10/%E5%85%A8%E5%B1%80Toast/</guid>
        
        <category>Android动画</category>
        
        <category>Canvas</category>
        
        
      </item>
    
      <item>
        <title>多种姿势花式实现薄荷Loading动画（上）</title>
        <description>&lt;p&gt;&lt;em&gt;本文属于Android技术论述文章，阅读完大致需要五分钟&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;没时间的小伙伴可以直接跳过文章，&lt;a href=&quot;https://github.com/JadynAi/LoadingLovely&quot;&gt;点击项目地址&lt;/a&gt;，如果喜欢的话，顺手给个star那是极好的【娇羞……】&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;好吧。先说一下为什么要做这个项目。&lt;br /&gt;
前几天使用薄荷的时候，凑巧看到了这个Loading动画，觉得效果还不错。就想尝试着实现一下。
&lt;img src=&quot;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS4K2TE-DhDYxAfzBxpt6HFZA18hP4nD6Xc4YQTpgKtCI0MJ8ly&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
先看一下原版的效果，GIF录制的比较快，但应该还可以看清楚。&lt;br /&gt;
&lt;img src=&quot;http://ailoli.me/img/20170819-blog-1.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;先上本次最终实现的效果图吧颜色当然选择今年最流行的原谅色&quot;&gt;先上本次最终实现的效果图吧，颜色当然选择今年最流行的原谅色：&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://ailoli.me/img/20170819-blog-3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;思路分析&quot;&gt;思路分析&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1、整个图形的形状如何绘制&lt;/li&gt;
  &lt;li&gt;2、如何让线条动起来&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;整个图形的形状分析&quot;&gt;整个图形的形状分析&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;好了，首先我们来分析一下这个图案，如果是静态的，那么如何绘制？&lt;br /&gt;
 很简单，拆分。我们将图形拆开分解，然后再看。分析细节和步骤，这是要点。&lt;br /&gt;
 我这里将这个图分成了三份。
    &lt;ul&gt;
      &lt;li&gt;第一个，也就是叶柄。也就是下面那一条小小的竖线。原Loading图中不甚明显，但还是有的。叶柄没什么说的，直线就可以了。&lt;/li&gt;
      &lt;li&gt;第二个，叶子的左轮廓边缘和右轮廓边缘。这是一段下肥上窄的弧线，椭圆截取感觉不妥，我这里采用的是贝塞尔二阶曲线。有关Android贝塞尔相关的知识大家可以看看&lt;a href=&quot;http://blog.csdn.net/u013831257/article/details/51281136&quot;&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
      &lt;li&gt;第三个，也就是叶片的脉络，线和线交叉连接，没什么可说的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;那么重点其实就是叶子左右轮廓的绘制了，我画了一张草图。大家可以看看：&lt;br /&gt;
&lt;img src=&quot;http://ailoli.me/img/20170819-blog-4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;其中黑色的框作为View的边界。A点是左轮廓曲线的起点，B点事贝塞尔曲线的控制点，我把它定义到了View的左边框那里。C点事整个贝塞尔曲线的终点，D点则是实际上曲线的最高点。&lt;br /&gt;
右轮廓则和左轮廓是镜像存在。&lt;br /&gt;
图有点潦草，不过应该还看得懂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;好了，静态图形拆解完毕。接着看，如何让图动起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何让线条动起来&quot;&gt;如何让线条动起来&lt;/h4&gt;
&lt;p&gt;整个项目中，如何让线条真正的动起来才是要点。刚开始在这里的思路，是想使用&lt;code class=&quot;highlighter-rouge&quot;&gt;canvas.drawCircle&lt;/code&gt;绘制在一张Bitmap上，以点汇面。后面实现起来发现，这种方式特别不靠谱。&lt;br /&gt;
为什么不靠谱呢？因为点连接成线，每次移动的速率和距离都得计算，很麻烦。很容易出现断点的情况。&lt;br /&gt;
最后，我采用的是让&lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt;去绘制一段&lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt;路径，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt;路径不停的刷新改变。这样做的好处，是&lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt;更加直观易于控制。而且还不用多绘制一张&lt;code class=&quot;highlighter-rouge&quot;&gt;Bitmap&lt;/code&gt;。&lt;br /&gt;
整个项目中，自定义的View，&lt;code class=&quot;highlighter-rouge&quot;&gt;LeafAnimView&lt;/code&gt;做的工作很少，只是在&lt;code class=&quot;highlighter-rouge&quot;&gt;onDraw&lt;/code&gt;方法内，调起了绘制而已。具体的绘制都交给&lt;code class=&quot;highlighter-rouge&quot;&gt;LeafAtom&lt;/code&gt;了。面向对象嘛。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;具体的思路，是我把总时间按比例分成四部分。生成四个属性动画，在属性动画的监听里作&lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt;的x和y的变化。在绘制的时候，只需要将这四个动画依次播放，即可得到每个时间段的具体运动值。而且还是均匀变化的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LeafAnimView&lt;/code&gt;内部作为动画引擎的是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueAnimator&lt;/code&gt;,使用它来触发View的onDraw。同时也使用它来控制整个动画的时间。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mValueAnimator = ValueAnimator.ofFloat(0, 1);
        mValueAnimator.setDuration(5000);
        mValueAnimator.setRepeatCount(ValueAnimator.INFINITE);
        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                invalidate();
            }
        });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LeafAtom&lt;/code&gt;类内部接受到这个总时长，然后将运动总时间分割，根据比例计算出绘制叶柄、左右轮廓、脉络的动画时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------在LeafAnimView类内部---------
 @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (null == mLeafAtom) {
         //传入总时长
            mLeafAtom = new LeafAtom(getWidth(), getHeight(), mValueAnimator.getDuration());
        }
        if (!mValueAnimator.isStarted()) {
            mValueAnimator.start();
        }
        //开始绘制
        mLeafAtom.drawGraph(canvas, mPaint);
    }
    
-------在LeafAtome类---------------
public static final float PETIOLE_RATIO = 0.1f;//叶柄所占比例
public LeafAtom(int width, int height, long duration) {

        mWidth = width;
        mHeight = height;

        mPetioleTime = (long) (duration * PETIOLE_RATIO);//绘制叶柄的时间
        mArcTime = (long) (duration * (1 - PETIOLE_RATIO) * 0.4f);//左右轮廓弧线的时间
        mLastLineTime = duration - mPetioleTime - mArcTime * 2;//最后一段叶脉的时间

        mBezierBottom = new PointF(mWidth * 0.5f, mHeight * (1 - PETIOLE_RATIO));//左侧轮廓底部点
        mBezierControl = new PointF(0, mHeight * (1 - 3 * PETIOLE_RATIO));//左侧轮廓控制点
        mBezierTop = new PointF(mWidth * 0.5f, 0);//左侧轮廓顶部结束点

        mVeinBottomY = mHeight * (1 - PETIOLE_RATIO) - 10;//右侧轮廓底部点Y轴坐标，稍稍低一点
        mOneNodeY = mVeinBottomY * 4 / 5;//第一个节点的Y轴坐标
        mTwoNodeY = mVeinBottomY * 2 / 5;//第二个节点Y轴坐标
        initEngine();
        setOrginalStatus();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;LeafAtom&lt;/code&gt;的构造函数中，得到每一个阶段动画的时间，然后生成四个属性动画，在这个属性动画的监听里去做Path的x和y坐标的值变化。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; /**
     * 初始化path引擎
     */
    private void initEngine() {
         //叶柄动画，Y轴变化由底部运动到叶柄高度的地方
        mPetioleAnim = ValueAnimator.ofFloat(mHeight, mHeight * (1 - PETIOLE_RATIO)).setDuration(mPetioleTime);
        //左右轮廓贝塞尔曲线，只需要只奥时间变化是从0~1的。起点、控制点、结束点都知道了
        mArcAnim = ValueAnimator.ofFloat(0, 1.0f).setDuration(mArcTime);
        //绘制叶脉的动画
        mLastAnim = ValueAnimator.ofFloat(mVeinBottomY, 0).setDuration(mLastLineTime);

        mPetioleAnim.setInterpolator(new LinearInterpolator());
        mArcAnim.setInterpolator(new LinearInterpolator());
        mLastAnim.setInterpolator(new LinearInterpolator());
        mArcRightAnim = mArcAnim.clone();

        mPetioleAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mY = (float) animation.getAnimatedValue();
            }
        });
        mArcAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                computeArcPointF(animation, true);
            }
        });
        mArcRightAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                computeArcPointF(animation, false);
            }
        });
        mLastAnim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mY = (float) animation.getAnimatedValue();
                float tan = (float) Math.tan(Math.toRadians(30));
                if (mY &amp;lt;= mOneNodeY &amp;amp;&amp;amp; mY &amp;gt; mTwoNodeY) {
                    mOneLpath.moveTo(mX, mOneNodeY);
                    mOneRpath.moveTo(mX, mOneNodeY);
                    //这里的参数x和y代表相对当前位置偏移量，y轴不加偏移量会空一截出来，这里的15是经验值
                    mMainPath.addPath(mOneLpath, 0, EXPRIENCE_OFFSET);
                    mMainPath.addPath(mOneRpath, 0, EXPRIENCE_OFFSET);
                    //第一个节点和第二个节点之间
                    float gapY = mOneNodeY - mY;
                    mOneLpath.rLineTo(-gapY * tan, -gapY);
                    mOneRpath.lineTo(mX + gapY * tan, mY);
                } else if (mY &amp;lt;= mTwoNodeY) {
                    mTwoLpath.moveTo(mX, mTwoNodeY);
                    mTwoRpath.moveTo(mX, mTwoNodeY);

                    //第二个节点，为避免线超出叶子，取此时差值的一半作计算
                    float gapY = (mTwoNodeY - mY) * 0.5f;
                    mMainPath.addPath(mTwoLpath, 0, EXPRIENCE_OFFSET);
                    mMainPath.addPath(mTwoRpath, 0, EXPRIENCE_OFFSET);

                    mTwoLpath.rLineTo(-gapY * tan, -gapY);
                    mTwoRpath.rLineTo(gapY * tan, -gapY);
                }
            }
        });

        mEngine = new AnimatorSet();
        mEngine.playSequentially(mPetioleAnim, mArcAnim, mArcRightAnim, mLastAnim);
        mEngine.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                super.onAnimationEnd(animation);
                setOrginalStatus();
            }
        });
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;计算贝塞尔曲线运动过程中的方法。贝塞尔曲线是有一个函数的，我们知道起点、控制点、终点的话，就可以根据时间计算出此时此刻的x和y的坐标。而这个时间变化是从0~1变化的。谨记。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private void computeArcPointF(ValueAnimator animation, boolean isLeft) {
        float ratio = (float) animation.getAnimatedValue();
        //ratio从0~1变化，左右轮廓三个点不一样
        PointF bezierStart = isLeft ? mBezierBottom : mBezierTop;
        PointF bezierControl = isLeft ? mBezierControl : new PointF(mWidth, mHeight * (1 - 3 * PETIOLE_RATIO));
        PointF bezierEnd = isLeft ? mBezierTop : new PointF(mWidth * 0.5f, mVeinBottomY);
        PointF pointF = calculateCurPoint(ratio, bezierStart, bezierControl, bezierEnd);
        mX = pointF.x;
        mY = pointF.y;
    }
    private PointF calculateCurPoint(float t, PointF p0, PointF p1, PointF p2) {
        PointF point = new PointF();
        float temp = 1 - t;
        point.x = temp * temp * p0.x + 2 * t * temp * p1.x + t * t * p2.x;
        point.y = temp * temp * p0.y + 2 * t * temp * p1.y + t * t * p2.y;
        return point;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;叶脉的绘制，在节点一和节点二，分别加上两个向左和向右伸展开的Path路径即可。
    &lt;ul&gt;
      &lt;li&gt;需要说明的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;lineTo&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;rLineTo&lt;/code&gt;的区别，&lt;code class=&quot;highlighter-rouge&quot;&gt;lineTo&lt;/code&gt;的参数代表的就是目标参数，而&lt;code class=&quot;highlighter-rouge&quot;&gt;rLineTo&lt;/code&gt;的参数代表的是，目标参数和起点参数的差值。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最后在&lt;code class=&quot;highlighter-rouge&quot;&gt;drawGraph&lt;/code&gt;函数中，启动这个动画集合：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void drawGraph(Canvas canvas, Paint paint) {
        if (mEngine.isStarted()) {
            canvas.drawPath(mMainPath, paint);
            mMainPath.lineTo(mX, mY);
        } else {
            mEngine.start();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;以上就是本次项目的主要思路了相关注释代码里都写的很清楚了项目地址在这里仿薄荷loading动画大家走过路过千万别忘了给个star啊&quot;&gt;以上，就是本次项目的主要思路了。相关注释代码里都写的很清楚了，项目地址在这里。&lt;a href=&quot;https://github.com/JadynAi/LoadingLovely&quot;&gt;仿薄荷Loading动画&lt;/a&gt;，大家走过路过千万别忘了给个Star啊。&lt;/h3&gt;
&lt;h3 id=&quot;下次还是这个动画我会尝试一种新的方式来实现这个动画&quot;&gt;下次还是这个动画，我会尝试一种新的方式来实现这个动画~~&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://ubq.ubiaoqing.com/ubiaoqing57e8baface2c423152.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 19 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/19/%E4%BB%BF%E8%96%84%E8%8D%B7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/19/%E4%BB%BF%E8%96%84%E8%8D%B7/</guid>
        
        <category>Android动画</category>
        
        <category>Canvas</category>
        
        
      </item>
    
      <item>
        <title>玩转ListView和Recyclerview适配器，轻松切换不是问题！！！</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;本文属于严肃文学题材，不科幻、不狗血。阅读完大概需要耗时五分钟。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;文章初衷：&lt;br /&gt;
因为我现在所开发的项目中，存在着ListView和Recyclerview共存的情况。而且因为种种原因，并不能完全地抛弃ListView奔向Recyclerview的床。&lt;br /&gt;
相信很多人开发过程中也遇到过这种问题，于是乎就诞生了这样一个想法，能不能让这俩组件的适配器“通用”呢？&lt;br /&gt;
需注意：适配器的封装有很多种方法，本文只提供其中一种思路。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;先奉上项目地址:&lt;/strong&gt;&lt;a href=&quot;https://github.com/JadynAi/Adapter&quot;&gt;一个Adapter&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;用法讲一讲&quot;&gt;用法讲一讲&lt;/h4&gt;
&lt;h5 id=&quot;1普通列表&quot;&gt;1、普通列表&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;ListView&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private ItemsAdapter mListAdapter;
mListAdapter = ItemsAdapter.create(this).putItemClass(TestItemView.class).build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Recyclerview&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private RecyclerAdapter mRecyclerAdapter;
mRecyclerAdapter = RecyclerAdapter.create(this).putItemClass(TestItemView.class).build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Recyclerview适配器和ListView适配器通用的TestItemView类代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class TestItemView extends AbsItemView&amp;lt;ItemBusiness, TestBean&amp;gt; {

    @Override
    protected void initView(Activity activity, ViewGroup parent, ItemBusiness itemBusiness, ViewHolderHelper holderHelper) {

    }

    @Override
    protected int getLayoutId() {
        return R.layout.item_layout;
    }

    @Override
    public void showItem(ViewHolderHelper holderHelper, TestBean itemData) {
        holderHelper.setText(R.id.test_tv, itemData.s);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;在initView（……）方法中可以设置View的一些属性，比如宽高、透明度等等；&lt;br /&gt;
设置数据则是在showItem（……）方法中，需要说明的是这两个方法都有一个ViewHolderHelper的参数，这个是我封装的一个工具类。有一些常用的setText或者setAlpha等一些方法，里面用一个Map来管理View，避免了过多的findViewById，同时也不用写那么多View的成员变量。&lt;br /&gt;
getLayoutId（）这个方法不用多讲了，返回布局Id。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;到这里相信大家也能看出来了，我解决Recyclerview和ListView适配器“通用”的解决方案，是让他们持有相同的ItemView。到时候如果需要更换组件的时候，只需要把代码中RecyclerAdapter.create(this)更换为ItemsAdapter.create(this)，或者反向更换即可。怎么样，是不是很简单呢。&lt;/strong&gt;
&lt;img src=&quot;http://pic.qqtn.com/up/2017-3/14883343916120558.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其实让两个组件适配器“通用”本来就是一个伪命题，需要的参数都不一样。既然此路不通，那么不妨换种思路，让他俩的ItemView通用不就解决问题了吗。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AbsItemView这个类比较重要，后续的一系列操作都会用到它。&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;2优雅的实现多种item-type数据绑定&quot;&gt;2、优雅的实现多种Item Type数据绑定&lt;/h5&gt;

&lt;p&gt;处理多Item Type的情况，是采用&lt;code class=&quot;highlighter-rouge&quot;&gt;数据&lt;/code&gt;绑定&lt;code class=&quot;highlighter-rouge&quot;&gt;AbsItemView&lt;/code&gt;的方式。也就是说一种数据类型对应一种&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemType&lt;/code&gt;。
多item的范例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ItemsAdapter.create(this)
                .putItemClass(TestItemView.class)
                .putItemClass(TestOneItemView.class)
                .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;由于是示例代码，&lt;code class=&quot;highlighter-rouge&quot;&gt;TestOneItemView&lt;/code&gt;的代码和&lt;code class=&quot;highlighter-rouge&quot;&gt;TestItemView&lt;/code&gt;代码差不多相同，唯一区别是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class TestOneItemView extends AbsItemView&amp;lt;ItemBusiness, TestOneBean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;TestOneItem绑定的数据类型是TestOneBean,没错你没有看错，数据和ItemView之间的绑定是通过泛型来进行的。
在&lt;code class=&quot;highlighter-rouge&quot;&gt;putItemClass&lt;/code&gt;这个方法里，通过反射得到泛型的类型，以此类型的hashCode为key，将ItemView的类型存入一个map中。设置数据时根据不同的数据类型生成不同的ItemView。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然，如果你的自定义的ItemView不想依赖泛型，想设置成强绑定类型的话，也是支持的。方法如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;putItemClass(@NonNull Class&amp;lt;? extends D&amp;gt; itemDataClass,
                                        @NonNull Class&amp;lt;? extends AbsItemView&amp;lt;?, D&amp;gt;&amp;gt; itemViewClass)&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;3点击事件以及itemview所需要处理的业务逻辑&quot;&gt;3、点击事件以及itemView所需要处理的业务逻辑&lt;/h5&gt;
&lt;p&gt;点击事件默认Adapter是不进行处理的，你可以通过ListView原生的setOnItemClick来进行设置。&lt;br /&gt;
或者也可以直接在AbsItemView内部直接对根View设置点击事件。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;点击事件和业务逻辑都通过一个类来实现，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemBusiness&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ItemsAdapter.create(this)
                .putItemClass(TestItemView.class)
                .putItemClass(TestOneItemView.class)
                .setItemBusinessFactory(new ItemBusiness.Factory() {
                    @Override
                    public ItemBusiness create(AbsItemView itemView) {
                    	//itemView方法判断数据类型来返回不同的ItemBusiness
                        if (itemView.isMatch(TestOneBean.class)) {
                            return new ItemBusiness(itemView) {
                                @Override
                                public void onItemClick() {
                                    super.onItemClick();
                                    //点击事件的处理
                                }
                            }.setSetItemClick(true);
                        }
                        return null;
                    }
                })
                .build()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;需注意的是，ItemBusin默认是不处理点击事件，需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;setItemClick&lt;/code&gt;方法设置为true才能在Business内处理点击事件。
在这里我需要解释一下这个类。&lt;br /&gt;
这个类存在的意义相当于MVP模式里的Presenter，业务处理类。我们项目中目前也大量使用了MVP模式，但一直觉得Presenter这个名称不太适合。于是和朋友讨论了一下，觉得使用Business这个名称来得更恰当一点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;ItemBusiness内部本身提供了很多方法,方便于一些业务逻辑的处理，譬如点击某个按钮刷新数据，移除数据啊等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //刷新列表
    public final void notifyDataSetChanged() {
        mAdapter.notifyDataSetChanged();
    }

    //刷新当前ItemView，只支持Recyclerview
    public final void notifyItemDataChanged() {
        setItemData(mPosition, mItemData);
    }
    
    //返回总数据size
    public final int getCount() {
        return mAdapter.getItemCount();
    }

    //返回此项数据
    public final D getItemData() {
        return mItemData;
    }

    //返回当前position
    public final int getPosition() {
        return mPosition;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;当然你也可以自定义ItemBusiness，因为在项目开发的过程中，有可能也会需要在ItemView内处理不少的业务逻辑。譬如网络请求，交互动画啊等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;好了一些基本的操作就在这里了本项目设计遵从mvp思想将业务逻辑itembusiness和ui逻辑absitemview分离开来从而使得项目结构更加清晰方便迭代以及测试&quot;&gt;好了，一些基本的操作就在这里了。本项目设计遵从MVP思想，将业务逻辑（ItemBusiness）和UI逻辑（AbsItemView）分离开来。从而使得项目结构更加清晰，方便迭代以及测试。&lt;/h4&gt;

&lt;h3 id=&quot;以上就是这个项目的一些简介了大家要是喜欢的话这里是github地址一个adapter喜欢的话不妨随手点一个赞吧&quot;&gt;以上就是这个项目的一些简介了。大家要是喜欢的话，这里是GitHub地址&lt;a href=&quot;https://github.com/JadynAi/Adapter&quot;&gt;一个Adapter&lt;/a&gt;，喜欢的话不妨随手点一个赞吧。&lt;/h3&gt;

</description>
        <pubDate>Wed, 02 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/08/02/%E9%80%82%E9%85%8D%E5%99%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/08/02/%E9%80%82%E9%85%8D%E5%99%A8/</guid>
        
        <category>技术讨论</category>
        
        <category>代码封装</category>
        
        <category>适配器</category>
        
        
      </item>
    
      <item>
        <title>实用性MAX!像普通View一样自由使用的粒子组件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处。
之前作过一篇&lt;a href=&quot;http://ailoli.me/2017/05/03/Android%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E4%B9%8B-%E8%90%A4%E7%81%AB%E8%99%AB%E9%A3%9E%E8%88%9E%E6%95%88%E6%9E%9C/&quot;&gt;萤火虫飞舞粒子效果&lt;/a&gt;，当时看还不错。无论是性能还是UI都满足了当时的设计效果，但实际应用到项目中，却发现由于&lt;code class=&quot;highlighter-rouge&quot;&gt;SurfaceView &lt;/code&gt;其本身是绘制在&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;层面上的，对&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;本身的属性有很多的限制，用起来却不是很实在，还存在着很多不足。&lt;/p&gt;

  &lt;p&gt;于是便将之前的效果重新写了一下，改用继承View来实现，虽然说和&lt;code class=&quot;highlighter-rouge&quot;&gt;SurfaceView&lt;/code&gt;相比，在绘制性能上有那么一丝丝的不足 。但轮子本质的含义还是为了服务于项目，项目中方便的使用才是最重要的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;阅读本文大概需要三分半钟如果需要直观看代码的话请点这里点这里&quot;&gt;&lt;em&gt;阅读本文，大概需要三分半钟。如果需要直观看代码的话&lt;/em&gt;&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;请点这里点这里！！&lt;/a&gt;&lt;/h6&gt;

&lt;h4 id=&quot;首先看一下效果图&quot;&gt;首先看一下效果图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ailoli.me/img/20170628-blog_particle.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;接着分析实现过程中的几个问题&quot;&gt;接着分析实现过程中的几个问题&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;如何保持不间断的绘制&lt;/li&gt;
  &lt;li&gt;粒子的运动轨迹控制（随机方向，碰到边界回弹以及旋转）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;问题1如何保持不间断的绘制&quot;&gt;问题1：如何保持不间断的绘制&lt;/h5&gt;

&lt;p&gt;​       &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; 的粒子绘制本身实在&lt;code class=&quot;highlighter-rouge&quot;&gt;onDraw&lt;/code&gt;中进行的，所以最开始我的方案是在&lt;code class=&quot;highlighter-rouge&quot;&gt;canvas&lt;/code&gt;绘制完一波之后，继续调用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate()&lt;/code&gt;方法，这样就形成了一个死循环，就达到了不间断重复绘制的效果。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    canvas.save();
    //粒子的一波绘制
    for (Particle circle : mCircles) {
        circle.drawItem(canvas);
    }
    canvas.restore();
    invalidate();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里需要注意的是，canvas的绘制是一个阻塞的过程，也就是从&lt;code class=&quot;highlighter-rouge&quot;&gt;canvas.save()&lt;/code&gt;方法之后，一直到&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate()&lt;/code&gt;之前，是阻塞的。&lt;/p&gt;

  &lt;p&gt;重绘是会一直等到所有的粒子绘制完成之后，才会继续调起的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;tips&quot;&gt;Tips：&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;canvas的save和restore方法是搭配使用的。save存储之前的canvas状态，restore恢复save之前的状态。&lt;/li&gt;
  &lt;li&gt;save方法是可以多次使用的，可以搭配使用的是方法restoreToCount(saveCount)。参数saveCount从1开始计数，表示可以恢复到第几次save之前的状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​      这种方式的缺点在demo完成之后很明显的体现了出来。第一，速度不可控制，譬如有些时候恰恰需要粒子变慢一点呢。使用这种方式就不太好实现了。第二，粒子动画的播放和暂停实现起来不优雅，诚然写一个布尔值来控制也可以，但也难免………………太不优雅了吧。反正我个人是比较不喜欢写这种代码的。&lt;/p&gt;

&lt;p&gt;​      那么，最终我的实现方式，是采用了属性动画来实现的，没错——就是&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueAnimator&lt;/code&gt;。来看代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private ValueAnimator mParticleAnim;
-----------------
mParticleAnim = ValueAnimator.ofInt(0).setDuration(30);
mParticleAnim.setRepeatCount(ValueAnimator.INFINITE);
mParticleAnim.addListener(new AnimatorListenerAdapter() {
    @Override
    public void onAnimationRepeat(Animator animation) {
        super.onAnimationRepeat(animation);
        Log.d(TAG, &quot;onAnimationRepeat: &quot; + System.currentTimeMillis());
        invalidate();
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这段代码展示出来，你懂得。&lt;/p&gt;

  &lt;p&gt;在一个无限循环的属性动画里，在Repeat监听事件里，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate&lt;/code&gt;方法重绘。这样每次触发重绘的时间间隔就是属性动画的持续时间。&lt;/p&gt;

  &lt;p&gt;要是想控制粒子的运动速率，那么只需要调整动画的持续时间即可。&lt;/p&gt;

  &lt;p&gt;而且如果要对外暴露粒子动画开始或者停止的方法，只需要控制属性动画的&lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt;就行了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;问题2粒子的运动轨迹&quot;&gt;问题2：粒子的运动轨迹&lt;/h5&gt;

&lt;p&gt;​       在构建轮子的时候，思路其实一直都很清晰。&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;层级主要是调起和控制绘制。具体要绘制什么东西和路线的控制都由粒子对象内部来实现。这样就可以贯彻单一原则，各自负责各自的东西，降低耦合性。&lt;/p&gt;

&lt;p&gt;​       我们来看一下粒子对象&lt;code class=&quot;highlighter-rouge&quot;&gt;Particle&lt;/code&gt;内的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public Particle(Bitmap drawBitmap, Matrix matrix, Paint paint, float x, float y, int width, int height) {
	//绘制的bitmap对象和矩阵对象，矩阵用来控制旋转和运动方向
    mDrawBitmap = drawBitmap;
    mBitmapMatrix = matrix;

    mDrawBitmapWidth = drawBitmap.getWidth();
    mDrawBitmapHeight = drawBitmap.getHeight();

    mBitmapCenterX = mDrawBitmapWidth / 2f;
    mBitmapCenterY = mDrawBitmapHeight / 2f;

	//画笔对象
    mPaint = paint;
	//view 的宽和高用来判断边界
    this.mWidth = width;
    this.mHeight = height;
    //粒子运动的坐标
    this.mX = x;
    this.mY = y;
	//粒子的开始坐标
    mStartX = x;
    mStartY = y;
	//x 和y轴的运动方向选择，随机函数
    mIsAddX = mRandom.nextBoolean();
    mIsAddY = mRandom.nextBoolean();

    setRandomParm();
}

private void setRandomParm() {
	//x 和 y轴每次运动的距离和每次旋转的角度，随机值
     mDisX = mRandom.nextInt(2) + 1.2f;
     mDisY = mRandom.nextInt(2) + 1.2f;
     mAddDegree = mRandom.nextInt(5) + 3f;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​         运动轨迹这方面只需要随机出来x和y轴的方向，还有每次递增或者递减的值即可。怎么样是不是丝毫没有技术难度啊。好了，看绘制和到边界的处理代码吧。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void drawItem(Canvas canvas) {
    //绘制
    mBitmapMatrix.reset();
    mBitmapMatrix.preTranslate(mX += getPNValue(mIsAddX, mDisX), mY += getPNValue(mIsAddY, mDisY));
    mBitmapMatrix.preRotate(mDegrees += mAddDegree, mBitmapCenterX, mBitmapCenterY);
    canvas.drawBitmap(mDrawBitmap, mBitmapMatrix, mPaint);
    Log.d(TAG, &quot;mX : &quot; + mX);
    Log.d(TAG, &quot;mY : &quot; + mY);
    judgeOutline();
}

private void judgeOutline() {
    boolean judgeX = mX &amp;lt;= 0 || mX &amp;gt;= (mWidth - mDrawBitmapWidth);
    boolean judgeY = mY &amp;lt;= 0 || mY &amp;gt;= (mHeight - mDrawBitmapHeight);
    if (judgeX) {
        mIsAddX = !mIsAddX;
        mIsAddY = mRandom.nextBoolean();
        setRandomParm();
        if (mX &amp;lt;= 0) {
            mX = 0;
        } else {
            mX = mWidth - mDrawBitmapWidth;
        }
        return;
    }
    if (judgeY) {
        mIsAddY = !mIsAddY;
        mIsAddX = mRandom.nextBoolean();
        setRandomParm();
        if (mY &amp;lt;= 0) {
            mY = 0;
        } else {
            mY = mHeight - mDrawBitmapHeight;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​         以上就是粒子对象内部的运动轨迹和边界判断代码了，怎样，是不是超级简单呢？&lt;/p&gt;

&lt;p&gt;​	&lt;img src=&quot;http://ubq.ubiaoqing.com/ubiaoqing98134eb63a4fca7ea739c6e566ca71e7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;好了如果你喜欢我的文章的话那么请不要犹豫给我一个star吧github地址这里这里&quot;&gt;好了，如果你喜欢我的文章的话，那么请不要犹豫，给我一个star吧。GitHub地址：&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;这里这里！！&lt;/a&gt;&lt;/h3&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/28/%E7%B2%92%E5%AD%90%E5%8D%87%E7%BA%A7/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/28/%E7%B2%92%E5%AD%90%E5%8D%87%E7%BA%A7/</guid>
        
        <category>技术讨论</category>
        
        <category>粒子效果</category>
        
        <category>Android动画</category>
        
        
      </item>
    
      <item>
        <title>低消耗、带回滚动画的仿探探交互效果</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;前段时间项目中有一个仿探探的交互界面，写代码的过程中，觉得效果还不错。就把思路和原理记录了下来，分享一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;先奉上GitHub地址，大家感兴趣可以来个star&lt;/strong&gt;&lt;a href=&quot;https://github.com/JadynAi/InfinateCard&quot;&gt;&lt;strong&gt;InfinateCard&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;套路还是要走一下的先给大家看一下效果图&quot;&gt;套路还是要走一下的，先给大家看一下效果图:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://ailoli.me/img/20170510infinite_card.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;真机上一点都不卡！一点都不卡！不卡！！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;又学习了一些录制gif的方法这次来一张真机的效果&quot;&gt;&lt;em&gt;又学习了一些录制GIF的方法，这次来一张真机的效果！！&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://ailoli.me/img/20170510infinite_card_real_phone.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;会用到的知识点&quot;&gt;会用到的知识点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Recyclerview的layoutManager实现布局&lt;/li&gt;
  &lt;li&gt;使用&lt;a href=&quot;https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html&quot;&gt;ItemTouchHelper&lt;/a&gt;处理滑动事件&lt;/li&gt;
  &lt;li&gt;手指滑动过程中，view的UI渐变（透明度或者其它）&lt;/li&gt;
  &lt;li&gt;RecyclerView的ItemAnimator实现回滚动画&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;1layoutmanger&quot;&gt;1、LayoutManger&lt;/h5&gt;

  	众所周知，Recyclerview之所以强大，完全在于它百变的适应性。它能实现任何你想要的布局样式，而它的奥秘就在于LayoutManger。

&lt;p&gt;​	本次项目中我们UI效果仿照探探的样式，是卡牌样式的堆叠效果，按照List集合的顺序沿着Z轴纵向深处排列。&lt;strong&gt;这里有一个值得注意的Tip&lt;/strong&gt;，子view是按照list集合的顺序去绘制的，也就是在这个我们自定义的LayoutManger里，第二个view会覆盖第一个，第三个会覆盖第二个，以此类推。如果我们想要第一眼就看到List集合的第一个，那么必须将list集合reverse后，再来绘制。&lt;/p&gt;

&lt;p&gt;​	好了，我们来看代码。LayoutManger的精髓其实就在于onLayoutChildren（……）这个方法，通过这个方法来实现自定义的布局。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
    int itemCount = getItemCount();
    // 代码的稳健之道，就在于该保护的地方一定要保护
    if (itemCount == 0) {
        return;
    }
    detachAndScrapAttachedViews(recycler);
    for (int position = 0; position &amp;lt; itemCount; position++) {
        View view = recycler.getViewForPosition(position);
        addView(view);
        measureChildWithMargins(view, 0, 0);
        int widthSpace = getWidth() - getDecoratedMeasuredWidth(view);
        int heightSpace = getHeight() - getDecoratedMeasuredHeight(view);
        // recyclerview 布局
        layoutDecoratedWithMargins(view, widthSpace / 2, heightSpace / 2,
                widthSpace / 2 + getDecoratedMeasuredWidth(view),
                heightSpace / 2 + getDecoratedMeasuredHeight(view));
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	很多人看到这里，肯定会喷出一句“卧槽！这就完了，就这点代码？”&lt;/p&gt;

&lt;p&gt;​	没错，如果不追求精细的话，这点代码确实可以搞定这个布局样式。现在我们来逐行分析一下代码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;detachAndScrapAttachedViews(recycler)&lt;/code&gt;这个方法就是将所有的view缓存在&lt;strong&gt;scrap&lt;/strong&gt;里。Recyclerview有二级缓存，&lt;strong&gt;scrap&lt;/strong&gt;和&lt;strong&gt;Recycle&lt;/strong&gt;。使用Detach方式处理的view缓存在&lt;strong&gt;scrap&lt;/strong&gt;里，用的时候不需要重新绑定数据。Remove方式处理的view缓存在&lt;strong&gt;Recycle&lt;/strong&gt;里，使用的时候会重新绑定数据。&lt;/li&gt;
  &lt;li&gt;接下来的for循环代码就简单的多了，无非就是获得view的宽高信息，将其布局在Recyclerview内&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然，如果只是以上那些简单的代码，未免也太对不起Recyclerview了。毕竟Recyclerview最强大的地方就是对view的回收和利用了，要不然为什么叫Recycler呢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;对子view的回收利用&quot;&gt;对子view的回收利用&lt;/h6&gt;

&lt;p&gt;​	首先这种卡牌叠层的交互模式，不需要展示那么多的view，也就是我们仅仅需要让前几个view展示出来就可以了。其他的view，放在&lt;strong&gt;scrap&lt;/strong&gt;缓存里即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {
    int itemCount = getItemCount();
    // 代码的稳健之道，就在于该保护的地方一定要保护
    if (itemCount == 0) {
        return;
    }
    detachAndScrapAttachedViews(recycler);
    // 测量子view的位置信息并储存
    for (int position = 0; position &amp;lt; itemCount; position++) {
        // 根据position获取一个碎片view，可以从回收的view中获取，也可能新构造一个
        View view = recycler.getViewForPosition(position);
        Log.d(TAG, &quot;recycler&quot; + view.getTag().toString());
        addView(view);
        if (mViewInfo == null) {
        	// 计算此碎片view包含边距的尺寸
        	measureChildWithMargins(view, 0, 0);
        	// getDecoratedMeasuredWidth方法是获取此碎片view包含边距和装饰的宽度width
        	int widthSpace = getWidth() - getDecoratedMeasuredWidth(view);
        	int heightSpace = getHeight() - getDecoratedMeasuredHeight(view);
            mViewInfo = new Rect();
            int left = widthSpace / 2;
            int top = heightSpace / 2;
            int right = widthSpace / 2 + getDecoratedMeasuredWidth(view);
            int bottom = heightSpace / 2 + getDecoratedMeasuredHeight(view);
            mViewInfo.set(left, top, right, bottom);
        }
        detachAndScrapView(view, recycler);
    }
    LayoutItems(recycler, state);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;我们将view的位置信息使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Rect&lt;/code&gt;对象来保存，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;layoutDecorated(View child, int left, int top, int right, int bottom) &lt;/code&gt;这个函数的参数是整型。&lt;code class=&quot;highlighter-rouge&quot;&gt;Rect&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;RecF&lt;/code&gt;两个对象最大的区别就是精度区别了。&lt;/li&gt;
  &lt;li&gt;然后将每个子view通过方法&lt;code class=&quot;highlighter-rouge&quot;&gt;detachAndScrapView&lt;/code&gt;缓存到&lt;strong&gt;scrap&lt;/strong&gt;内&lt;/li&gt;
  &lt;li&gt;最后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;LayoutItems(recycler, state)&lt;/code&gt;方法将需要展示的view展示出来，注释已经很清楚了哈&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 回收不需要的Item，并且将需要显示的Item从缓存中取出
 */
private void LayoutItems(RecyclerView.Recycler recycler, RecyclerView.State state) {
    // 当数量大于临界点才需要回收view
    boolean isMeetNum = getItemCount() &amp;gt; CardConfig.MAX_SHOW_INDEX + 1;
    if (isMeetNum) {
        for (int i = CardConfig.MAX_SHOW_INDEX + 1; i &amp;lt; getItemCount(); i++) {
            View child = recycler.getViewForPosition(i);
            removeAndRecycleView(child, recycler);
        }
    }
    // 展示需要展示的view
    for (int i = isMeetNum ? CardConfig.MAX_SHOW_INDEX : getItemCount() - 1; i &amp;gt;= 0; i--) {
        View scrap = recycler.getViewForPosition(i);
        measureChildWithMargins(scrap, 0, 0);
        addView(scrap);
        //将这个item布局出来
        layoutDecorated(scrap, mViewInfo.left, mViewInfo.top, mViewInfo.right, mViewInfo.bottom);
        int translateY = i * CardConfig.CARD_VERTICAL_GAP;
        ViewCompat.setTranslationY(scrap, -translateY);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个方法中，将不需要展示的view全部remove，然后将需要展示的view布局出来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;2使用itemtouchhelper实现滑动&quot;&gt;2、使用ItemTouchHelper实现滑动&lt;/h5&gt;

&lt;p&gt;​	ItemTouchHelper是一个为Recyclerview提供   &lt;code class=&quot;highlighter-rouge&quot;&gt;Swipe、drag、drop&lt;/code&gt;事件的工具类。使用方法也很简单，推荐大家看&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0630/3123.html&quot;&gt;泡网&lt;/a&gt;的这一片入门文章，思路很清晰。&lt;/p&gt;

&lt;p&gt;​	本次项目中使用的是ItemTouchHelper本身提供的一个帮助类   &lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCallback&lt;/code&gt;，使用方法其实很简单。它的构造参数有两个值，一个是&lt;code class=&quot;highlighter-rouge&quot;&gt;dragDirs&lt;/code&gt;长按的方向，另一个是&lt;code class=&quot;highlighter-rouge&quot;&gt;swipeDirs&lt;/code&gt;滑动的方向。可以看看SImpleCallBack的源码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public SimpleCallback(int dragDirs, int swipeDirs) {
    mDefaultSwipeDirs = swipeDirs;
    mDefaultDragDirs = dragDirs;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	而我们只需要滑动，所以构造参数中只需要实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;swipe&lt;/code&gt; 即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//不支持长按拖拽，支持swipe，而且四个方向皆可以swipe
this(0, ItemTouchHelper.UP | ItemTouchHelper.DOWN | ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	然后应用此 &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemTouchHelper&lt;/code&gt; 即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CardItemTouchHelperCallback cardCallback = new CardItemTouchHelperCallback(mRecyclerView, mRecyclerView.getAdapter(), list);
ItemTouchHelper touchHelper = new ItemTouchHelper(cardCallback);
touchHelper.attachToRecyclerView(mRecyclerView);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	到这里 Recyclerview已经实现了四个方向的滑动了，但滑动之后的操作还需要再实现一下。我们在&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onSwiped(RecyclerView.ViewHolder viewHolder, int direction)&lt;/code&gt; 方法中实现 swipe之后的操作。这个方法有两个参数，&lt;code class=&quot;highlighter-rouge&quot;&gt;viewHolder&lt;/code&gt;代表的就是此时滑动的viewholder，&lt;code class=&quot;highlighter-rouge&quot;&gt;direction&lt;/code&gt; 代表的是这个view最终滑动的方向。在这个方法里，我们对数据源进行操作，然后刷新列表。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在Recyclerview的Adapter的数据刷新上，我使用了扩展包提供的 &lt;a href=&quot;http://blog.csdn.net/zxt0601/article/details/52562770&quot;&gt;DiffUtils&lt;/a&gt;,是google提供的替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;notifyDataSetChanged()无脑刷&lt;/code&gt; 的方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	最后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) &lt;/code&gt; 方法中实现滑动时的动画。这个方法有多达七个参数，我来依次解释一下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;c ，Recyclerview用来绘制children的画笔&lt;/li&gt;
    &lt;li&gt;recyclerView，额……就是所依赖的Recyclerview&lt;/li&gt;
    &lt;li&gt;viewHolder，当下滑动的这个view的viewHolder&lt;/li&gt;
    &lt;li&gt;dX、dY，手指在控制滑动的时候，此view水平X轴和垂直Y轴位移的距离，单位像素&lt;/li&gt;
    &lt;li&gt;actionState，标明此时是长按拖拽还是单纯的swipe&lt;/li&gt;
    &lt;li&gt;isCurrentlyActive，标明此时滑动的view是处于手指控制状态，还是手指松开后的回弹动画状态&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;​	了解了参数之后，在这个方法中就可以实现滑动时的动画了。&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleCallBack&lt;/code&gt; 默认的对滑动距离判断的条件是，水平方向是Recyclerview宽的一半，垂直方向是Recyclerview高的一半。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//这个方法返回的值就是默认的阙值，想要更灵敏的话只需在自定义CallBack中重写这个方法，将值变小。更迟钝的话则反之
public float getSwipeThreshold(ViewHolder viewHolder) {
    return .5f;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	撸出来的代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
    public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
        super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
//        Log.d(TAG, &quot;onChildDraw dX : &quot; + dX);
//        Log.d(TAG, &quot;onChildDraw dY : &quot; + dY);
        Log.d(TAG, &quot;onChildDraw isCurrentlyActive: &quot; + isCurrentlyActive);
        if (mItemW == 0) {
//            Log.d(TAG, &quot;onChildDraw getAdapterPosition : &quot; + viewHolder.getAdapterPosition());
            mItemW = viewHolder.itemView.getWidth();
            mHorJudgeDistance = recyclerView.getWidth() * getSwipeThreshold(viewHolder);
            mVerJudgeDistance = recyclerView.getHeight() * getSwipeThreshold(viewHolder);
        }

        float ratio;
        if (Math.abs(dX) &amp;gt; Math.abs(dY)) {
            //以宽为判定基准
            ratio = Math.abs(dX) / mHorJudgeDistance;
        } else {
            //以高为判定基准
            ratio = Math.abs(dY) / mVerJudgeDistance;
        }
        float realRatio = ratio &amp;gt;= 1f ? 1f : ratio;
        ViewCompat.setAlpha(viewHolder.itemView, 1 - realRatio);

        boolean isMeetNum = recyclerView.getLayoutManager().getItemCount() &amp;gt; CardConfig.MAX_SHOW_COUNT + 1;
        int maxJudge = isMeetNum ? CardConfig.MAX_SHOW_COUNT - 1 : (recyclerView.getLayoutManager().getItemCount() - 1);
        for (int i = 1; i &amp;lt;= maxJudge; i++) {
            View itemView = recyclerView.findViewHolderForAdapterPosition(i).itemView;
            float v = i * CardConfig.CARD_VERTICAL_GAP - realRatio * CardConfig.CARD_VERTICAL_GAP;
            ViewCompat.setTranslationY(itemView, -v);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3使用itenanimator实现回滚动画&quot;&gt;3、使用ItenAnimator实现回滚动画&lt;/h5&gt;

&lt;p&gt;​	&lt;code class=&quot;highlighter-rouge&quot;&gt;ItemAnimator&lt;/code&gt; 我没有选择实现，而是使用了现成的轮子&lt;a href=&quot;https://github.com/wasabeef/recyclerview-animators&quot;&gt;&lt;strong&gt;recyclerview-animators&lt;/strong&gt;&lt;/a&gt;，没有选择远程库引入。而是将源代码copy进来，再进行了适当性的修改。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mRecyclerView.setItemAnimator(new SlideAnimator());
mRecyclerView.getItemAnimator().setAddDuration(250);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;​	OK，到这里基本上就大功告成了，只剩下一些小细节和bug处理一下即可。在&lt;code class=&quot;highlighter-rouge&quot;&gt;CallBack&lt;/code&gt; 类的 &lt;code class=&quot;highlighter-rouge&quot;&gt;onSwipe&lt;/code&gt; 方法中将 &lt;code class=&quot;highlighter-rouge&quot;&gt;direction&lt;/code&gt; 赋值到一个静态变量中，然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;SlideAnimator&lt;/code&gt; 根据不同的方向实现不同的动画。&lt;/p&gt;

&lt;p&gt;​	在实现过程中，我发现回滚动画的那个view居然不是滑走的view，就使用了一个单例来管理数据。动画开始时将数据设置为滑走的view的数据，动画结束后再将动画view的数据还原。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
protected void preAnimateAddImpl(RecyclerView.ViewHolder holder) {
    Log.d(TAG, &quot;preAnimateAddImpl: &quot; + holder.itemView.getTag().toString());
    DataExchangeMgr.getInstance().saveOrignData((int) holder.itemView.getTag(R.id.view_data));
    //根据不同的方向设置不同的初始值
    if (isHorizDirection()) {
        int width = holder.itemView.getRootView().getWidth();
        ViewCompat.setTranslationX(holder.itemView, CardConfig.sViewholderDirection == ItemTouchHelper.LEFT ? -width : width);
    } else {
        int height = holder.itemView.getRootView().getHeight();
        ViewCompat.setTranslationY(holder.itemView, CardConfig.sViewholderDirection == ItemTouchHelper.UP ? -height : height);
    }
}

@Override
protected void animateAddImpl(final RecyclerView.ViewHolder holder) {
    //根据不同的方向选择不同的动画
    ViewPropertyAnimatorCompat viewPropertyAnimatorCompat = ViewCompat.animate(holder.itemView)
            .setDuration(getAddDuration())
            .setInterpolator(mInterpolator)
            .setListener(new DefaultAddVpaListener(holder) {
                @Override
                public void onAnimationStart(View view) {
                    super.onAnimationStart(view);
                    //将此view数据设置为滑开的数据
                    ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getCurrentData());
                }

                @Override
                public void onAnimationCancel(View view) {
                    super.onAnimationCancel(view);
                    //数据还原
                    ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getOrignalData());
                }

                @Override
                public void onAnimationEnd(View view) {
                    super.onAnimationEnd(view);
                    //数据还原
                    ((ImageView) mViewHolder.itemView.findViewById(R.id.show_img)).setImageResource(DataExchangeMgr.getInstance().getOrignalData());
                }
            })
            .setStartDelay(50);
    
    if (isHorizDirection()) {
        viewPropertyAnimatorCompat
                .translationX(0)
                .start();
    } else {
        viewPropertyAnimatorCompat
                .translationY(0)
                .start();
    }
}

private boolean isHorizDirection() {
    return CardConfig.sViewholderDirection == ItemTouchHelper.LEFT || CardConfig.sViewholderDirection == ItemTouchHelper.RIGHT;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后感兴趣的可以看看代码，奉上GitHub地址。&lt;a href=&quot;https://github.com/JadynAi/InfinateCard&quot;&gt;&lt;strong&gt;InfinateCard&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/10/%E4%BD%8E%E6%B6%88%E8%80%97%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%8D%A1%E7%89%8C%E6%95%88%E6%9E%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/10/%E4%BD%8E%E6%B6%88%E8%80%97%E7%9A%84%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%E5%8D%A1%E7%89%8C%E6%95%88%E6%9E%9C/</guid>
        
        <category>Recyclerview</category>
        
        <category>技术讨论</category>
        
        
      </item>
    
      <item>
        <title>Android萤火虫飞舞粒子效果</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;GitHub地址&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;原创文章，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;萤火虫飞舞粒子效果&quot;&gt;萤火虫飞舞粒子效果&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;本项目中我提供了两种方案，最终呈现的效果如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://JadynAi.github.io/img/20170428-blog-particle.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;先奉上GitHub地址&lt;/strong&gt;&lt;a href=&quot;https://github.com/JadynAi/Particle&quot;&gt;戳这里&lt;/a&gt;，有兴趣的同鞋star一下咯&lt;/p&gt;

&lt;h2 id=&quot;实现原理&quot;&gt;实现原理&lt;/h2&gt;

&lt;p&gt;Android的粒子效果、粒子动画，已经有很多开源的轮子了。作为一个坚定的轮子主义者，我google了大半天，却没有找到这种类似于萤火虫飞舞的效果。只好自己来实现这种效果。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;相比较普通的View，SurfaceView更加适合这种不断变化的画面，所以选择SurfaceView来实现。现在把思路再重新梳理一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大小不同的粒子在区域内随机分布&lt;/li&gt;
  &lt;li&gt;粒子做无规则运动，然后消失&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;粒子区域内随机分布&quot;&gt;粒子区域内随机分布&lt;/h5&gt;

&lt;p&gt;这个简单，我们在callBack的方法内直接循环生成一个粒子的数组即可。方位的话使用Random即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (mCircles.size() == 0) {
    for (int i = 0; i &amp;lt; MAX_NUM; i++) {
        FloatParticleLine f = new FloatParticleLine(getF() * mMeasuredWidth, getF() * mMeasuredHeight, mMeasuredWidth, mMeasuredHeight);
        f.setRadius(mRandom.nextInt(2) + 1.2f);
        mCircles.add(f);
    }
}
private float getF() {
        float v = mRandom.nextFloat();
        if (v &amp;lt; 0.2f) {
            return v + 0.2f;
        } else if (v &amp;gt;= 0.85f) {
            return v - 0.2f;
        } else {
            return v;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;getF（）方法是限制在区域内取值，mMeasuredWidth、mMeasuredHeight为SurfaceView的宽和高。&lt;/p&gt;

  &lt;p&gt;这里的宽和高在粒子对象FloatParticleLine，内会用到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后我们在创建一个线程，在run（）方法内做无线循环的绘制即可，为了避免无意义的绘制，可以使用Thread.sleep方法来控制帧数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (isRun) {
    try {
        mCanvas = mHolder.lockCanvas(null);
        if (mCanvas != null) {
            synchronized (mHolder) {
                // 清屏
                mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);

                for (FloatParticleLine circle : mCircles) {
                    circle.drawItem(mCanvas);
                }
                // 控制帧数
                Thread.sleep(25);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (mCanvas != null) {
            mHolder.unlockCanvasAndPost(mCanvas);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;isRun的变量我们会在SurfaceView内callBack的surfaceDestroyed方法中置为false&lt;/p&gt;

&lt;h5 id=&quot;粒子做无规则运动&quot;&gt;粒子做无规则运动&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;方案一&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实看到这种粒子效果，首先应该想到的就是Canvas了。&lt;/p&gt;

&lt;p&gt;在SurfaceView里就是通过不断地循环调用FloatParticleLine类的drawItem（）方法来实现粒子的运动。我第一种方案的实现，就是每一个粒子在被创建出来的时候，就随机选择一个方向开始运动，滑过一定的轨迹之后让其消失就好了。&lt;/p&gt;

&lt;p&gt;至于怎么选择随机方向，我这里的做法是，分别随机生成一个x和y轴上的递增或者递减的数值，然后每次在前一次绘制的基础上，x和y分别递增递减，直到运动到屏幕边缘或者是规定的运动距离满足了再消失即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//随机生成参数
private void setRandomParm() {
    // 2017/5/2-上午10:47 x和y的方向
    mIsAddX = mRandom.nextBoolean();
    mIsAddY = mRandom.nextBoolean();

    // 2017/5/2-上午10:47 x和y的取值
    mDisX = mRandom.nextInt(2) + 0.2f;
    mDisY = mRandom.nextInt(2) + 0.3f;

    // 2017/5/2-上午10:47 内部区域的运动最远距离
    mDistance = mRandom.nextInt((int) (0.25f * mWidth)) + (0.125f * mWidth);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;绘制图形：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public void drawItem(Canvas canvas) {
    if (mX == mStartX) {
        mPaint.setAlpha(ALPHA_MAX);
    }
    //绘制
    canvas.drawCircle(mX += getPNValue(mIsAddX, mDisX), mY += getPNValue(mIsAddY, mDisY), mRadius, mPaint);
    //内部区域运动到一定距离消失
    if (judgeInner()) {
        float gapX = Math.abs(mX - mStartX);
        float ratio = 1 - (gapX / mDistance);
        mPaint.setAlpha((int) (255 * ratio));
        mRadius = mStartRadius * ratio;
        if (gapX &amp;gt;= mDistance || mY - mStartY &amp;gt;= mDistance) {
            resetDisXY();
            return;
        }
        return;
    }
    //外部区域运动到屏幕边缘消失
    if (judgeOutline()) {
        resetDisXY();
    }
}

private void resetDisXY() {
        setRandomParm();

        mPaint.setAlpha(0);
        mX = mStartX;
        mY = mStartY;
        mRadius = mStartRadius;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;judgeInner()和judgeOutline()是判断区域的方法，内部区域的点和外部区域的店消失时机不同&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在透明度为0也就是粒子消失时，让粒子回到原点，再重新选择一个方向，进行下一步运动轨迹。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方案二&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方案二粒子做的运动是贝塞尔曲线，函数实在网上找到的一个函数。每当粒子做完一次曲线运动后，再随机生成一段新的贝塞尔曲线即可。&lt;/p&gt;

&lt;p&gt;思路和方案一的思路都是一样的，无非就是运动的轨迹不同而已。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;做完之后回头再看，发现这个项目的原理其实并不难，可以说是简单了。但刚开始起步的时候真的还是比较懵的，原因就是没有思路。&lt;/p&gt;

&lt;p&gt;所以做任何效果，思路最重要。&lt;/p&gt;

</description>
        <pubDate>Wed, 03 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/03/Android%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E4%B9%8B-%E8%90%A4%E7%81%AB%E8%99%AB%E9%A3%9E%E8%88%9E%E6%95%88%E6%9E%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/03/Android%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88%E4%B9%8B-%E8%90%A4%E7%81%AB%E8%99%AB%E9%A3%9E%E8%88%9E%E6%95%88%E6%9E%9C/</guid>
        
        <category>粒子效果</category>
        
        <category>Android动画</category>
        
        <category>技术讨论</category>
        
        
      </item>
    
      <item>
        <title>JadynAi的第一篇博客</title>
        <description>
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%8A%80%E6%9C%AF/</guid>
        
        <category>技术讨论</category>
        
        
      </item>
    
  </channel>
</rss>
